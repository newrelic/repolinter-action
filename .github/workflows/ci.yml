name: CI
on: [push, pull_request]

env:
  THIRD_PARTY_GIT_AUTHOR_EMAIL: opensource+repolinter-action@newrelic.com
  THIRD_PARTY_GIT_AUTHOR_NAME: Actionbot

jobs:
  job-test-unit:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-16.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Node
        uses: actions/setup-node@v2-beta
        with:
          node-version: '12'
      
      - name: Get NPM Cache Directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      
      - name: Cache NPM
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint
      
      - name: Typescript Build
        run: npm run build
      
      - name: NCC Package
        run: npm run package
      
      - name: Test
        run: npm run test
      
      - name: Coverage
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: codecov/codecov-action@v1
  
  job-test-system:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-16.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Run Action (JSON)
        id: repolinter-json
        uses: ./
        with:
          config_file: ./.github/workflows/test-rulesets/repolinter-test.json
      
      - name: Verify Outputs
        env:
          DID_ERROR: ${{ steps.repolinter-json.outputs.errored }}
          DID_PASS: ${{ steps.repolinter-json.outputs.passed }}
        shell: bash
        run: '[ "$DID_ERROR" = "false" ] && [ "$DID_PASS" = "true" ]'
      
      - name: Run Action (YAML)
        id: repolinter-yaml
        uses: ./
        with:
          config_file: ./.github/workflows/test-rulesets/repolinter-test.yaml
      
      - name: Verify Outputs
        env:
          DID_ERROR: ${{ steps.repolinter-yaml.outputs.errored }}
          DID_PASS: ${{ steps.repolinter-yaml.outputs.passed }}
        shell: bash
        run: '[ "$DID_ERROR" = "false" ] && [ "$DID_PASS" = "true" ]'
  
  job-generate-third-party-notices:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [job-test-unit, job-test-system]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      # Probably not necessary since the ubuntu-latest image would have latest Node LTS release
      # and nothing in this job _needs_ older Node
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Get NPM Cache Directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      
      - name: Cache NPM
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci

      - name: Install OSS CLI
        run: |
          sudo npm install -g @newrelic/newrelic-oss-cli
      
      - name: Generate Third Party Notices
        run: |
          if [ ! -f "third_party_manifest.json" ]; then
            echo "::error::third_party_manifest.json is missing. Must generate using the newrelic-oss-cli."
            exit 1
          fi
          # latest commit
          LATEST_COMMIT=$(git rev-parse HEAD)
          # latest commit where package.json was changed
          LAST_CHANGED_COMMIT=$(git log -1 --format=format:%H --full-diff package.json)
          if [ $LAST_CHANGED_COMMIT = $LATEST_COMMIT ]; then
            git config user.email "${{ env.THIRD_PARTY_GIT_AUTHOR_EMAIL }}"
            git config user.name "${{ env.THIRD_PARTY_GIT_AUTHOR_NAME }}"
            oss third-party manifest
            oss third-party notices
            git add third_party_manifest.json
            git add THIRD_PARTY_NOTICES.md
            
            git commit -m 'chore: update third-party manifest and notices [skip ci]'
            git push origin ${GITHUB_REF#/refs/heads/} 
          else
            echo "No change in package.json, not regenerating third-party notices"
          fi

  job-generate-release:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [job-test-unit, job-test-system, job-generate-third-party-notices]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      
      - name: Get NPM Cache Directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      
      - name: Cache NPM
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Build
        run: npm run build

      - name: Package
        run: npm run package

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          extra_plugins: |
            @semantic-release/git
            @semantic-release/changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update Major Version Tag
        if: steps.semantic.outputs.new_release_published == 'true'
        run: "git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:refs/heads/v${{steps.semantic.outputs.new_release_major_version}}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cache Docker layers
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Set up Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Generate Docker Tags
        if: steps.semantic.outputs.new_release_published == 'true'
        id: tags
        shell: python
        env:
          NEW_RELEASE_MAJOR_VERSION: ${{ steps.semantic.outputs.new_release_major_version }}
          NEW_RELEASE_MINOR_VERSION: ${{ steps.semantic.outputs.new_release_minor_version }}
          NEW_RELEASE_PATCH_VERSION: ${{ steps.semantic.outputs.new_release_patch_version }}
        run: |
          import os
          major, minor, patch, repo = os.environ["NEW_RELEASE_MAJOR_VERSION"], os.environ["NEW_RELEASE_MINOR_VERSION"], os.environ["NEW_RELEASE_PATCH_VERSION"], os.environ["GITHUB_REPOSITORY"]
          tags = f"ghcr.io/{repo}:latest,ghcr.io/{repo}:{major}.{minor},ghcr.io/{repo}:{major}.{minor}.{patch}"
          print(f"::set-output name=tags::{tags}")

      - name: Gather Docker Labels
        if: steps.semantic.outputs.new_release_published == 'true'
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@55d3462 #v1.9.1
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and Push to GitHub Container Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
