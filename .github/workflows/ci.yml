name: CI
on: [push, pull_request]

jobs:
  job-test-unit:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-16.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '15'
      
      - name: Cache NPM
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint
      
      - name: Typescript Build
        run: npm run build
      
      - name: NCC Package
        run: npm run package
      
      - name: Test
        run: npm run test
  
  job-test-system:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - ubuntu-16.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Build
        uses: docker/build-push-action@v2
        with:
          tags: ${{ github.repository }}:latest
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Run Action (JSON)
        id: repolinter-json
        run: >
          docker run -t 
          -v ${{ github.workspace }}:/github/workspace -w /github/workspace
          -e INPUT_DIRECTORY=/github/workspace
          -e INPUT_TOKEN=${{ github.token }}
          -e INPUT_USERNAME=app/github-actions
          -e INPUT_CONFIG_FILE=./.github/workflows/test-rulesets/repolinter-test.json
          -e INPUT_REPOSITORY=${{ github.repository }}
          -e INPUT_OUTPUT_TYPE=exit-code
          -e INPUT_OUTPUT_NAME="[Repolinter] Open Source Policy Issues"
          -e INPUT_LABEL_NAME=repolinter
          -e INPUT_LABEL_COLOR=fbca04
          -e GITHUB_RUN_NUMBER=${{ github.run_number }}
          -e GITHUB_ACTION=true
          ${{ github.repository }}:latest
      
      - name: Verify Outputs
        env:
          DID_ERROR: ${{ steps.repolinter-json.outputs.errored }}
          DID_PASS: ${{ steps.repolinter-json.outputs.passed }}
        shell: bash
        run: '[ "$DID_ERROR" = "false" ] && [ "$DID_PASS" = "true" ]'
      
      - name: Run Action (YAML)
        id: repolinter-yaml
        run: >
          docker run -t 
          -v ${{ github.workspace }}:/github/workspace -w /github/workspace
          -e INPUT_DIRECTORY=/github/workspace
          -e INPUT_TOKEN=${{ github.token }}
          -e INPUT_USERNAME=app/github-actions
          -e INPUT_CONFIG_FILE=./.github/workflows/test-rulesets/repolinter-test.yaml
          -e INPUT_REPOSITORY=${{ github.repository }}
          -e INPUT_OUTPUT_TYPE=exit-code
          -e INPUT_OUTPUT_NAME="[Repolinter] Open Source Policy Issues"
          -e INPUT_LABEL_NAME=repolinter
          -e INPUT_LABEL_COLOR=fbca04
          -e GITHUB_RUN_NUMBER=${{ github.run_number }}
          -e GITHUB_ACTION=true
          ${{ github.repository }}:latest
      
      - name: Verify Outputs
        env:
          DID_ERROR: ${{ steps.repolinter-yaml.outputs.errored }}
          DID_PASS: ${{ steps.repolinter-yaml.outputs.passed }}
        shell: bash
        run: '[ "$DID_ERROR" = "false" ] && [ "$DID_PASS" = "true" ]'

  job-generate-release:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [job-test-unit, job-test-system]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '15'
      
      - name: Cache NPM
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install Dependencies
        run: ci
      
      - name: Build
        run: npm run build

      - name: Package
        run: npm run package

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          extra_plugins: |
            @semantic-release/git
            @semantic-release/changelog
            @semantic-release/exec
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cache Docker layers
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Set up Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather Docker Labels
        if: steps.semantic.outputs.new_release_published == 'true'
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@55d3462 #v1.9.1
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and Push to GitHub Container Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: >-
            ghcr.io/${{ github.repository }}:latest,
            ghcr.io/${{ github.repository }}:v${{ steps.semantic.outputs.new_release_major_version }}.${{ steps.semantic.outputs.new_release_minor_version }},
            ghcr.io/${{ github.repository }}:v${{ steps.semantic.outputs.new_release_major_version }}.${{ steps.semantic.outputs.new_release_minor_version }}.${{ steps.semantic.outputs.new_release_patch_version }}

      - name: Update Major Version Tag
        if: steps.semantic.outputs.new_release_published == 'true'
        run: "git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:refs/heads/v${{steps.semantic.outputs.new_release_major_version}}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
